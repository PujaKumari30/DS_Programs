import java.util.*;
import java.lang.*;
import java.io.*;

class GFG {
	public static void main (String[] args) {
		int T;
		Scanner sc = new Scanner(System.in);
		T = sc.nextInt();
		while(T-->0)
		{
		    int m,n;
		    m = sc.nextInt();
		    int coins[] = new int[m];
		    for(int i=0;i<m;i++)
		    coins[i] = sc.nextInt();
		    n = sc.nextInt();
		    int ways = coinChange(coins,m,n);
		    System.out.println(ways);
		}
	}
		//Method-1 using 2D Array-Time Complexity = O(mn),Space Complexity = O(mn)
		public static int coinChange(int coins[],int m,int n)
		{
		    int table[][] = new int[m+1][n+1];
		    for(int i =0;i<=m;i++)
		    table[i][0] =1;
		    for(int i =1;i<=n;i++)
		    table[0][i] =0;
		    for(int i =1;i<=m;i++)
		    {
		        for(int j =1;j<=n;j++)
		        {
		            if(j<coins[i-1])
		            table[i][j]=table[i-1][j];
		            else
		            table[i][j] = table[i-1][j] + table[i][j-coins[i-1]];
		        }
		    }
		    
		    return table[m][n];
		}
		
		//Method-2 using 1D Array-Time Complexity = O(mn),Space Complexity = O(n)
		public static int coinChange(int coins[],int m,int n)
		{
		    int table[] = new int[n+1];
		    //Base Case
		    table[0]=1;
		    for(int i =0;i<m;i++)
		    {
		        for(int j=coins[i];j<=n;j++)
		        {
		            table[j] = table[j]+table[j-coins[i]];
		        }
		    }
		    
		    return table[n];
		}
	}
