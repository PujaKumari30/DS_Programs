/*Given an array A of size N having distinct elements, the task is to find the next greater element for each element of the array in order of their appearance in the array. If no such element exists, output -1  */

import java.util.*;
import java.lang.*;
import java.io.*;

class GFG {
	public static void main (String[] args) throws IOException {
	    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int T = Integer.parseInt(br.readLine());
		while(T-- >0)
		{
		    int n = Integer.parseInt(br.readLine());
		    int ar[] = new int[n];
		    String str[] = br.readLine().split(" ");
		    for(int i =0;i<n;i++)
		    ar[i] = Integer.parseInt(str[i]);
		    HashMap<Integer,Integer> hm = new HashMap<Integer,Integer>();
		    Stack<Integer> st = new Stack<Integer>(); 
		    st.push(ar[n-1]);
		    hm.put(ar[n-1],-1);
		    for(int i =n-2;i>=0;i--)
		    { 
		        if(st.isEmpty())
		        hm.put(ar[i],-1);
		        else
		        {
		             while(!st.isEmpty())
		              {
		               if(st.peek() > ar[i])
		                {
		                    hm.put(ar[i],st.peek());
		                    break;
		                }
		                
		                else
		                {
		                    st.pop();
		                    if(st.isEmpty())
		                    hm.put(ar[i],-1);
		                }
		           }
		           st.push(ar[i]);
		        }
		    }
		    for(int i : ar)
		    System.out.print(hm.get(i)+" ");
		    System.out.println();
		}
	}
}
/* Method-2 */
#include <bits/stdc++.h>
using namespace std;

int main() {
	
	
	int t;
	cin>>t;
	while(t--){
	    
	    int n;
	    cin>>n;
	    vector<int> v(n);
	    for(int i=0;i<n;i++){
	        cin>>v[i];
	    }
	    
	    vector<int> ans(n);
	    stack<int> s;
	    
	    // Push 1st element (index of 1st element to stack)
	    s.push(0);
	    
	    int cur;
	    
	    for(int i=1;i<n;i++){
	        
	        cur=v[i];
	        
	        // See if current element can be next larger element for any element in stack
	        while(!s.empty() && cur>v[s.top()]){
	            
	            // Found next larger element for s.top
	            ans[s.top()]=cur;
	            // Pop from stack
	            s.pop();
	            
	        }
	        // Now push current element index to stack
	        s.push(i);
	        
	    }
	    
	    // For remaining elements in stack ans is -1
	    while(!s.empty()){
	        
	        ans[s.top()]=-1;
	        s.pop();
	    }
	    
	    // Print the ans
	    for(int i=0;i<n;i++){
	        cout<<ans[i]<<" ";
	    }
	    cout<<endl;
	}
	return 0;
}
