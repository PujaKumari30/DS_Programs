/* To check whether a linked list is palindrome or not */

class Palindrome
{
    // Function to check if linked list is palindrome
    //Method 1 - using stack
    boolean isPalindrome(Node head) 
    {   
        if(head == null)
            return false;
        if(head.next == null)
            return true;
        Node current = head;
        Stack<Node> temp = new Stack<Node>();
        while(current!=null)
        {
            temp.push(current);
            current = current.next;
        }

        current = head;
        while(current !=null && !temp.isEmpty())
        {
	        if(current.data != temp.pop().data)
	        return false;
	        current = current.next;
        }
        return true;
    }  
    
    //Method -2 Recursive
    
    boolean isPalindromeUtil(Node right)  
    { 
        left = head; 
          
        /* stop recursion when right becomes NULL */
        if (right == null) 
            return true; 
  
        /* If sub-list is not palindrome then no need to 
           check for current left and right, return false */
        boolean isp = isPalindromeUtil(right.next); 
        if (isp == false) 
            return false; 
  
        /* Check values at current left and right */
        boolean isp1 = (right.data == (left).data); 
  
        /* Move left to next node */
        left = left.next; 
  
        return isp1; 
    } 
  
    // A wrapper over isPalindromeUtil() 
    boolean isPalindrome(Node head)  
    { 
        boolean result = isPalindromeUtil(head); 
        return result; 
    } 
}
