/*Print tree in level order spiral form */
class Node
{
    int data;
    Node left, right;
    Node(int item)
    {
        data = item;
        left = right = null;
    }
}
*/
class Spiral
{
    public int height(Node root)
    {
        if(root == null)
        return 0;
        else{
        int lheight = height(root.left);
        int rheight = height(root.right);
        if(lheight > rheight)
            return lheight+1;
        else
            return rheight+1;
        }
    }
    
    public void printLevel(Node root,int level,boolean spiral)
    {
        if(root == null)
        return;
        if(level == 1)
        System.out.print(root.data+" ");
        else if(level >1){
            if(spiral==true)
            {
                printLevel(root.left,level-1,spiral);
                printLevel(root.right,level-1,spiral);
            }
            else
            {
                printLevel(root.right,level-1,spiral);
                printLevel(root.left,level-1,spiral);
            }
        }
       }
      void printSpiral(Node node) 
      {
        if(node == null)
            return;
        int h = height(node);
        boolean spiral=false;
        for(int i =1;i<=h;i++)
        {
            printLevel(node,i,spiral);
            spiral = !spiral;
        }
      }
}

/* Iterative Approach */
void printSpiral(Node node) 
      {
          if(node == null)
          return;
        Stack<Node> s1 = new Stack<Node>();
        Stack<Node> s2 = new Stack<Node>();
        s1.push(node);
        while(!s1.isEmpty() || !s2.isEmpty())
        {
            while(!s1.isEmpty())
            {
                Node temp = s1.peek();
                s1.pop();
                System.out.print(temp.data+" ");
                if(temp.right!=null)
                s2.push(temp.right);
                if(temp.left!=null)
                s2.push(temp.left);
            }
            
            while(!s2.isEmpty())
            {
                Node temp = s2.peek();
                s2.pop();
                System.out.print(temp.data+" ");
                if(temp.left!=null)
                s1.push(temp.left);
                if(temp.right!=null)
                s1.push(temp.right);
            }
            
        }
        
      }
